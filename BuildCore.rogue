# To run this build file, install Rogue from github.com/brombres/Rogue then cd
# to this folder and type "rogo" at the command line, or "rogo help" for a list
# of supported commands.

#$ LIBRARIES(Linux) = scons
#$ LIBRARIES(macOS) = scons

$requireRogue "2.18"

uses Utility/FilePatcher
uses Utility/GitIgnorePatcher
uses Utility/VersionNumber

augment Build
  # You can change these values:
  # - Here
  # - Create a Local.rogo file with overrides for them, e.g.:
  #   AUTOLAUNCH = "path/to/project/folder"
  # - Change them with a global-scope assignment in Build.rogue or BuildLocal.rogue
  PROPERTIES
    AUTOLAUNCH = ""  # Godot project path to auto-launch after a default 'rogo' build.
    MODULES    = @[]  # additional module filepaths

    config     = which{ JSON.load("Config.json") || @{} } : Value
    libraries  = Library[]

  METHODS
    method save_config
      local file = File("Config.json")
      local json = config.to_json( &formatted ) + "\n"
      if (file.exists and String(file) == json) return
      File("Config.json").save( json )
endAugment

routine rogo_default
  rogo_libs
  rogo_help
endRoutine

routine rogo_libs
  File( "Libraries/Modules" ).create_folder

  block patcher = GitIgnorePatcher( File(".gitignore") )
    patcher.add( "# RoGodot", "/Build" )
    patcher.add( "# RoGodot", "/Libraries" )
    patcher.save( &verbose )
  endBlock

  if (not File("Libraries").exists)
    File("Libraries").create_folder
  endIf

  (forEach in Build.libraries).ref?.configure
endRoutine

routine rogo_update( name=null:String )
  rogo_libs
  if (String.exists(name))
    if local lib = Build.libraries.find( $.has_name(name) )
      lib.update
    else
      println "[update] No such library: $"(name)
    endIf
  else
    (forEach in Build.libraries).ref?.update
  endIf
endRoutine

# 'rogo help build' custom per-OS description
block
  local desc = ...
    @|Builds the Godot editor and/or export templates for the specified platforms.
     |
     |TARGETS
     |  products:      [editor|templates]
     |  platforms:     [$PLATFORMS]
     |  modes:         [debug|release|dist]
     |
     |DESCRIPTION
     |  Any combination of target options can be given. By example:
     |

  desc += table(
    [
      ["rogo build","Builds the editor for the current OS."],
      ["rogo build macos web","Builds the editors for macOs and Web."],
      ["rogo build templates","Builds the export templates for the current OS in debug mode."],
      ["rogo build templates ios macos release","Builds the export templates for iOS and macOS in release mode."],
      ["rogo build dist","Builds and packages editors and templates for all platforms in both debug and release mode."],
      ["rogo build dist editor","Builds and packages editors for all platforms."],
      ["rogo build dist templates","Builds and packages templates for all platforms in both debug and release mode."],
      ["rogo build dist macos","Builds and packages the macOS editor and templates in both debug and release mode."],
      ["rogo build dist macos editor","Builds and packages the editor for macOS."]
    ],
    Console.width.or_smaller(100) - 2
  ).indented( 2 )
  desc .= replacing( "$PLATFORMS", ["all"].[add(supported_platforms)].join('|') )

  description( "build", desc )
endBlock

routine rogo_build
  # SYNTAX: rogo build [targets]
  local targets = System.command_line_arguments.cloned.[ remove_first ].join( '.' )
  build( targets )
endRoutine

routine build( targets:String )
  rogo_libs

  local config = BuildConfig( targets )
  local make_dist = config.make_dist

  forEach (platform in config.platforms)
    which (platform)
      case "android"
        local sdk = System.env//ANDROID_SDK_ROOT
        if (not sdk)
          sdk = System.env//ANDROID_HOME
          if (sdk)
            throw Error( "[ANDROID] ANDROID_SDK_ROOT is undefined. Set it to '$'."(sdk) )
          else
            throw Error( "[ANDROID] Cannot locate Android SDK. Install via Android Studio and ensure that environment variable ANDROID_SDK_ROOT exists." )
          endIf
        endIf
        if (not File(sdk/"cmdline-tools").exists)
          throw Error( "[ANDROID] Command line tools are not installed. Use Android Studio to install them." )
        endIf
      case "web"
        if (not System.find_executable("em++"))
          throw Error( "[Web] Cannot locate 'em++' compiler. Ensure 'emscripten' is installed." )
        endIf
    endWhich

    forEach (product in config.products)
      if (product == "editor" and not BuildConfig.EDITOR_PLATFORMS.contains(platform)) nextIteration
      local architectures = config.architectures
      if (architectures.is_empty)
        if (make_dist or product == "templates") architectures = all_architectures( platform )
        else                                     architectures = String[][null]
      endIf
      forEach (architecture in architectures)
        local modes = config.modes
        if (modes.is_empty)
          if (product == "editor")
            modes = [ "release" ]
          else
            if (make_dist) modes = [ "debug", "release" ]
            else           modes = [ "debug" ]
          endIf
        endIf
        forEach (mode in modes)
          local sim_flags = which{ platform=="ios" and product=="templates":[false,true] || [false] }
          forEach (is_sim in sim_flags)
            local platform_name = BuildConfig.PLATFORM_NAMES[platform]
            local product_name = which{ product=="editor":"editor" || "export template" }
            local arch = which{ architecture || "" }
            if (platform == "ios" and arch == "x86_64" and not is_sim) nextIteration

            local sim = which{ is_sim:"simulator" || "" }
            header "Building $ $ [$]"(platform_name,product_name,arch.appending(mode).appending(sim))

            local cmd = "cd Libraries/godot && scons platform=$"(platform)
            if (arch != "") cmd .= appending( "arch=$"(arch) )
            if (product == "editor")
              cmd .= appending( "target=editor" )
            else
              cmd .= appending( "target=template_$"(mode) )
              if (is_sim) cmd .= appending( "ios_simulator=yes" )
            endIf
            if (System.is_macos) cmd .= appending( "vulkan_sdk_path=../../Libraries/MoltenVK" )
            if (make_dist and mode == "release") cmd .= appending( "production=yes" )

            local modules = String[]
            forEach (lib in Build.libraries)
              local mod = lib.gd_module
              if (mod) modules.add( "../.."/mod )
            endForEach
            if (modules.count) cmd .= appending( 'custom_modules="$"'(modules.join(',')) )

            execute cmd
          endForEach
        endForEach
      endForEach
    endForEach
  endForEach

  #rogo_sync_templates

  if (make_dist)
    package( config )
  endIf
endRoutine

routine rogo_dist
  # Shorthand for 'rogo build dist'
  build( System.command_line_arguments.cloned.join( '.' ) )  # includes 'dist' target
endRoutine

routine rogo_package
  package( BuildConfig(System.command_line_arguments.cloned.[remove_first].join( '.' )) )
endRoutine

routine rogo_install
  install( BuildConfig(System.command_line_arguments.cloned.[remove_first].join( '.' )) )
endRoutine

routine introspection_call( sig:String )
  forEach (m in <<Routine>>.global_methods)
    if (m.signature == sig)
      m.call
      return
    endIf
  endForEach
  throw Error( "[INTERNAL ERROR] Routine $ is undefined."(sig) )
endRoutine

routine package( config:BuildConfig )
  rogo_libs
  forEach (platform in config.platforms)
    forEach (product in config.products)
      if (product == "editor" and not BuildConfig.EDITOR_PLATFORMS.contains(platform)) nextIteration
      introspection_call( "package_$_$()"(platform,product) )
      if (config.install) introspection_call( "install_$_$()"(platform,product) )
    endForEach
  endForEach
endRoutine

routine install( config:BuildConfig )
  forEach (platform in config.platforms)
    forEach (product in config.products)
      if (product == "editor" and not BuildConfig.EDITOR_PLATFORMS.contains(platform)) nextIteration
      introspection_call( "install_$_$()"(platform,product) )
    endForEach
  endForEach
endRoutine

routine copy( source:File, destination:File )
  assert source.exists
  if (source.is_folder)
    Files( source, "**" ).sync_to( destination, &verbose )
  else
    source.copy_to( destination, &verbose )
  endIf
endRoutine

routine package_ios_templates
  local folder = File( "Build/iOS/Templates" )
  folder.delete
  folder.create_folder

  local godot = File("Libraries/godot")

  Files( godot/"misc/dist/ios_xcode/**" ).sync_to( folder, &verbose )
  copy (godot/"bin/libgodot.ios.template_debug.arm64.a", folder/"libgodot.ios.debug.xcframework/ios-arm64/libgodot.a" )

  local cmd = "lipo -create Libraries/godot/bin/libgodot.ios.template_debug.arm64.simulator.a"
  cmd .= appending( "Libraries/godot/bin/libgodot.ios.template_debug.x86_64.simulator.a" )
  cmd .= appending( "-output Build/iOS/Templates/libgodot.ios.debug.xcframework/ios-arm64_x86_64-simulator/libgodot.a" )
  execute cmd

  copy(godot/"bin/libgodot.ios.template_release.arm64.a", folder/"libgodot.ios.release.xcframework/ios-arm64/libgodot.a" )

  cmd = "lipo -create Libraries/godot/bin/libgodot.ios.template_release.arm64.simulator.a"
  cmd .= appending( "Libraries/godot/bin/libgodot.ios.template_release.x86_64.simulator.a" )
  cmd .= appending( "-output Build/iOS/Templates/libgodot.ios.release.xcframework/ios-arm64_x86_64-simulator/libgodot.a" )
  execute cmd

  copy( File("Libraries/MoltenVK/Package/Release/MoltenVK/MoltenVK.xcframework"), folder/"MoltenVK.xcframework" )

  File( "Build/iOS/ios.zip" ).delete
  execute @|(cd Build/iOS/Templates && zip -r ../ios.zip *)
  header "iOS template packaged: Build/iOS/ios.zip"

endRoutine

routine install_ios_templates
  local file = File( "Build/iOS/ios.zip" )
  assert file.exists

  localize templates_folder
  assert templates_folder.parent.exists
  templates_folder.create_folder
  file.copy_to( templates_folder, &verbose )

endRoutine

routine templates_folder->File
  if (System.is_macos)
    return File( "~/Library/Application Support/Godot/export_templates" / version )
  else
    trace "TODO"
    throw Error( "[INTERNAL ERROR] Templates folder not defined for $."(System.os) )
  endIf
endRoutine

routine package_macos
  local godot = File("Libraries/godot")
  if (Files(godot/"bin/godot.macos.editor.*").any_newer_than(godot/"bin/godot.macos.editor.universal"))
    header "Building editor [macOS universal binary]"
    execute @|cd Libraries/godot && lipo -create bin/godot.macos.editor.x86_64 bin/godot.macos.editor.arm64 -output bin/godot.macos.editor.universal
  endIf

  local folder = File( "Build/macOS" )
  folder.create_folder
  (folder/"Godot.app/Contents/MacOS").create_folder

  Files( godot/"misc/dist/macos_tools.app/**" ).sync_to( File("Build/macOS/Godot.app"), &keep_unused, &verbose )

  execute @|cp Libraries/godot/bin/godot.macos.editor.universal Build/macOS/Godot.app/Contents/MacOS/Godot
  execute @|chmod +x Build/macOS/Godot.app/Contents/MacOS/Godot
  header "Build Complete: Build/macOS/Godot.app"
endRoutine

routine template_folder->File
  if (System.is_macos)
    return File( "~/Library/Application Support/Godot/export_templates/$"(version) )
  else
    trace "TODO"
    throw Error( "TODO" )
  endIf
endRoutine

routine rogo_run
  # Runs the most recent editor build for the current platform. If file Local.rogo exists and
  # contains the line 'AUTOLAUNCH = "path/to/project/folder"', that project will be opened when the
  # editor runs.
  local godot = File( "Libraries/godot" )
  if (System.is_macos)
    local exe_arch = godot/"bin/godot.macos.editor.$"(Process.run("uname -m",&env)->String.trimmed)
    local exe_universal = godot/"bin/godot.macos.editor.universal"
    local exe : File
    if (exe_arch.exists)
      if (exe_universal.exists)
        if (exe_universal.is_newer_than(exe_arch)) exe = exe_universal
        else                                       exe = exe_arch
      else
        exe = exe_arch
      endIf
    elseIf (exe_universal.exists)
      exe = exe_universal
    else
      throw Error( "[ERROR] No compatible macOS build product exists." )
    endIf

    if (String.exists(Build.AUTOLAUNCH))
      local project = File( Build.AUTOLAUNCH )
      contingent
        necessary (project.exists)
        if (not project.filepath.ends_with("project.godot"))
          project /= "project.godot"
          necessary (project.exists)
        endIf
        execute "$ $"(exe,project.esc)
      unsatisfied
        throw Error( "[ERROR] Cannot find autolaunch project '$'."(project) )
      endContingent
    else
      execute exe
    endIf

  else
    trace "TODO"

  endIf
endRoutine

routine rogo_clean
  # Deletes the 'bin', 'Build' and '.rogo' folders.
  forEach (folder in ["Libraries/godot/bin","Build",".rogo"])
    local file = File( folder )
    if (file.exists)
      println "[DELETE] $"(folder)
      file.delete
    endIf
  endForEach
endRoutine

routine version->String
  local v = String( File("Libraries/godot/version.py") )
  local parts = v.extract_strings( "*major = $(I)*minor = $(I)*patch = $(I)*" )
  local status = v.extract_string( ''*status = "$"*'' )
  if (parts.last == '0') parts.remove_last
  return "$.$"(parts.join('.'),status)
endRoutine

routine rogo_version( new_version="":String, new_status="":String )
  # SYNTAX: rogo version [x.y.z [status]]
  # Displays or changes the Godot version number in all applicable files.
  # Call without arguments to display the current version number.
  if (not String.exists(new_version))
    println version
    return
  endIf

  local v = new_version

  local godot = File("Libraries/godot")

  block patcher = FilePatcher( godot/"version.py" )
    local parts = v.split( '.' )
    while (parts.count < 3) parts.add( '0' )
    patcher.replace_line( "major =", "major = $"(parts[0]) )
    patcher.replace_line( "minor =", "minor = $"(parts[1]) )
    patcher.replace_line( "patch =", "patch = $"(parts[2]) )
    if (String.exists(new_status)) patcher.replace_line( "status =", ''status = "$"''(new_status) )
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"misc/dist/macos_tools.app/Contents/Info.plist" )
    if local i = patcher.locate( "<key>CFBundleShortVersionString</key>" )
      patcher.replace_line( i+1, "<string>$</string>"(v) )
    endIf
    if local i = patcher.locate( "<key>CFBundleVersion</key>" )
      patcher.replace_line( i+1, "<string>$</string>"(v) )
    endIf
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"misc/dist/windows/godot.iss" )
    patcher.replace_line( "#define MyAppVersion", ''#define MyAppVersion "$"''(v) )
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"modules/mono/editor/Godot.NET.Sdk/Godot.NET.Sdk/Godot.NET.Sdk.csproj" )
    patcher.replace_line( "<Version>", "<Version>$</Version>"(v) )
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"modules/mono/editor/Godot.NET.Sdk/Godot.SourceGenerators/Godot.SourceGenerators.csproj" )
    patcher.replace_line( "<Version>", "<Version>$</Version>"(v) )
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"modules/mono/glue/GodotSharp/GodotSharp/GodotSharp.csproj" )
    patcher.replace_line( "<Version>", "<Version>$</Version>"(v) )
    patcher.save
  endBlock

  block patcher = FilePatcher( godot/"modules/mono/glue/GodotSharp/GodotSharpEditor/GodotSharpEditor.csproj" )
    patcher.replace_line( "<Version>", "<Version>$</Version>"(v) )
    patcher.save
  endBlock

endRoutine

routine supported_platforms->String[]
  if (System.is_macos)
    return ["android","ios","macos","web"]
  elseIf (System.is_windows)
    return ["android","web","windows"]
  else
    # Assume Linux
    return ["android","linux","web"]
  endIf
endRoutine

routine supported_architectures( platform:String )->String[]
  which (platform)
    case "android"
      return ["x86_64","arm64"]
    case "ios"
      return ["x86_64","arm64"]
    case "linux"
      return ["x86_64","arm64","rv64"]
    case "macos"
      return ["x86_64","arm64"]
    case "web"
      return ["wasm32"]
    case "windows"
      return ["x86_32","x86_64"]
    others
      throw Error( "[ERROR] Unsupported platform '$'."(platform) )
  endWhich
  return null
endRoutine

routine all_architectures( platform:String )->String[]
  which (platform)
    case "android"
      return ["x86_64","arm64"]
    case "ios"
      return ["x86_64","arm64"]
    case "linux"
      return ["x86_64","arm64","rv64"]
    case "macos"
      return ["x86_64","arm64"]
    case "web"
      return ["wasm32"]
    case "windows"
      return ["x86_32","x86_64"]
    others
      throw Error( "[ERROR] Unsupported platform '$'."(platform) )
  endWhich
  return null
endRoutine

routine default_os->String
  return System.os.to_lowercase
endRoutine

routine header( title:String )
  local n = Console.width.or_smaller(100)
  println "┌$┐" ("─"*(n-2))
  println "│$$│"(title," "*(n-(title.count+2)))
  println "└$┘" ("─"*(n-2))
endRoutine

routine table( contents:String[][], total_w:Int32 )->String
  local w0 = 0
  w0 .= or_larger( (forEach in contents)[0].count )
  local w1 = 0
  w1 .= or_larger( (forEach in contents)[1].count )

  if (w0 + w1 + 3 > total_w)
    w0 .= or_smaller( (total_w-3)/2 )
    w1 = (total_w - 3 - w0)
  endIf

  local builder = String()
  builder.print "┌"
  loop (w0) builder.print "─"
  builder.print "┬"
  loop (w1) builder.print "─"
  builder.println "┐"
  forEach (row at j in contents)
    if (j > 0)
      builder.print "├"
      loop (w0) builder.print "─"
      builder.print "┼"
      loop (w1) builder.print "─"
      builder.println "┤"
    endIf
    local col0 = row[0].word_wrap( w0 ).iterator
    local col1 = row[1].word_wrap( w1 ).iterator
    while (col0.has_another or col1.has_another)
      builder.print   "│"
      builder.print   which{col0.has_another:col0.read||""}.justified(-w0)
      builder.print   "│"
      builder.print   which{col1.has_another:col1.read||""}.justified(-w1)
      builder.println "│"
    endWhile
  endForEach
  builder.print "└"
  loop (w0) builder.print "─"
  builder.print "┴"
  loop (w1) builder.print "─"
  builder.print "┘"
  return builder
endRoutine


class Library
  PROPERTIES
    name      : String
    folder    : File
    repo      : String
    branch    : String
    gd_module : String
    disabled  : Logical

  METHODS
    method init
      Build.libraries.add( this )
      disabled = config//disabled
      if (config//folder)
        folder = File( config//folder->String )
      else
        config//folder = folder->String
        save_config
      endIf

    method config->Value
      if (not Build.config.contains(name))
        Build.config[name] = @{}
        save_config
      endIf
      return Build.config[name]

    method configure
      if (config//repo)
        repo = config//repo
        if (config//branch) branch = config//branch
        else                branch = null

      else
        local message = "[$] Enter Git repo, repo#branch, #branch, or 'd' to disable."(name)
        local default = ""
        if (repo)
          default = repo
          if (branch) default += "#" + branch
          message .= appending( "(default: $)"(default) )
        endIf
        message += ":"
        ConsoleStyle.set<<FG_GREEN>>
        println message
        ConsoleStyle.reset

        local input = Console.input( "> " )
        if (not String.exists(input)) input = default

        if (input == "d")
          println "[$] Disabled. Edit Config.json to re-enable."(name)
          config//disabled = true
          save_config
          return
        endIf

        if (String.exists(input))
          if (input.begins_with('#'))
            branch = input.unleft(1)
          elseIf (input.contains('#'))
            repo = input.before_last( '#' )
            branch = input.after_last( '#' )
          else
            repo = input
            branch = null
          endIf
          config//repo = repo
          if (branch) config//branch = branch
        endIf
      endIf

      if (not folder.exists)
        header "Cloning $ repo"(name)
        local cmd = "git clone $"(repo)

        local maybe_commit = true
        if (branch)
          contingent
            forEach (ch in branch)
              necessary ch.is_number(16)
            endForEach

            # Could be a commit, a tag, or a branch

          unsatisfied
            # Definitely a tag or branch
            cmd .= appending( "-b" )
            cmd .= appending( branch )
            maybe_commit = false
          endContingent
        endIf

        cmd .= appending( folder.esc )

        execute cmd
        if (not folder.exists) System.exit(1)

        if (branch)
          if (maybe_commit)
            execute "cd $ && git checkout $"(folder.esc,branch)
          endIf
        endIf

      endIf

      if (not branch)
        # need to get branch name
        local result = Process.run("cd $ && git status"(folder.esc),&env)->String
        branch = result.split('\n').first.after_first("On branch ").trimmed
        config//branch = branch
      endIf

      save_config

    method ensure_no_local_repo_changes
      if (not has_local_repo_changes) return
      throw Error( "[$] $ has local changes - aborting."(name,folder) )

    method gd_module->String
      if (disabled) return null
      return @gd_module

    method has_local_repo_changes->Logical
      local result = Process.run( "cd $ && git status --porcelain"(folder.esc), &env )
      if (not result.success) return false
      return (result->String.trimmed != "")

    method has_name( n:String )->Logical
      return n.equals( name, &ignore_case )

    method pull_repo_changes
      execute "cd $ && git pull"(folder.esc)

    method needs_pull->Logical
      return Process.run("cd $ && git status"(folder.esc))->String.contains("can be fast-forwarded")

    method ref->Library
      return which{ disabled:null->(as Library) || this }

    method save_config
      Build.save_config

    method set_disabled( @disabled )
      config//disabled = disabled
      save_config

    method update
      ensure_no_local_repo_changes
      println "[$]"(name)
      execute "cd $ && git fetch --all"(folder.esc)
      if (needs_pull) pull_repo_changes

endClass


class BuildConfig
  GLOBAL PROPERTIES
    PRODUCTS         = ["editor","templates"]
    EDITOR_PLATFORMS = ["linux","macos","uwp","web","windows"]
    PLATFORMS        = ["all","android","ios","javascript","js","linux","macos","uwp","web","windows"]
    ARCHITECTURES    = ["x86_32","x86_64","arm32","arm64","rv64","ppc32","ppc64","wasm32"]
    MODES            = ["debug","release","dist","distributable"]
    ALIASES = { "distributable":"dist", "template":"templates", "javascript":"web", "js":"web" } : [String:String]
    PLATFORM_NAMES = { "android":"Android", "ios":"iOS", "linux":"Linux", "macos":"macOS",
                       "uwp":"UWP", "web":"Web", "windows":"Windows" } : [String:String]

  PROPERTIES
    products      = String[]
    platforms     = String[]
    architectures = String[]
    modes         = String[]
    make_dist     : Logical
    install       : Logical

  METHODS
    method init( target_string:String )
      if (not String.exists(target_string)) target_string = "default"

      localize supported_platforms

      local targets = target_string.split('.')
      if (targets.contains("install"))
        install = true
        targets.remove( "install" )
      endIf

      forEach (target in targets)
        if (target == "default") nextIteration
        if (target == "all")
          platforms.add( supported_platforms )
          nextIteration
        endIf

        if (ALIASES.contains(target)) target = ALIASES[ target ]

        if (PRODUCTS.contains(target))
          if (not products.contains(target)) products.add( target )
        elseIf (PLATFORMS.contains(target))
          if (not supported_platforms.contains(target))
            throw Error( "Invalid platform target '$'. Valid platforms on $ are [$]."...
                         (target,System.os,supported_platforms.join("|")) )
          endIf
          if (not platforms.contains(target)) platforms.add( target )
        elseIf (ARCHITECTURES.contains(target))
          if (not architectures.contains(target)) architectures.add( target )
        elseIf (MODES.contains(target))
          if (not modes.contains(target)) modes.add( target )
        else
          throw Error( "[ERROR] Invalid target: '$'."(target) )
        endIf
      endForEach

      if (modes.contains("dist"))
        make_dist = true
        modes.remove( "dist" )
      endIf

      if (make_dist)
        if (platforms.is_empty) platforms.add( supported_platforms )
        if (products.is_empty) products.[ add("editor"), add("templates") ]
      else
        if (platforms.is_empty) platforms.add( default_os )
        if (products.is_empty)
          contingent
            necessary (EDITOR_PLATFORMS.contains(forEach in platforms))
            products.add( "editor" )
          unsatisfied
            products.add( "templates" )
          endContingent
        elseIf (products.contains("editor"))
          forEach (p in platforms)
            if (not EDITOR_PLATFORMS.contains(p))
              throw Error( "[ERROR] Editor not supported on platform '$'."(p) )
            endIf
          endForEach
        endIf
      endIf

      if (architectures.count)
        forEach (arch in architectures)
          forEach (p in platforms)
            if (not supported_architectures(p).contains(arch))
              throw Error( "[ERROR] Platform '$' does not support architecture '$'."(p,arch) )
            endIf
          endForEach
        endForEach
      endIf

endClass

routine execute( commands:String, error_message=null:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " )
    println( cmd )
    if (0 != System.run(cmd))
      if (suppress_error)
        return false
      else
        if (not error_message) error_message = "Build failed."
        throw Error( error_message )
      endIf
    endIf
  endForEach
  return true
endRoutine


#-------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#-------------------------------------------------------------------------------
# Rogo is a "build your own build system" facilitator. At its core Rogo just
# recompiles build files if needed and then runs the build executable while
# forwarding any command line arguments. This file contains a default framework
# which uses introspection to turn command line arguments into parameterized
# routine calls.

# Example: to handle the command "rogo abc xyz 5", define
# "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

# The following "comment directives" can be used in this file to control how
# RogueC compiles it and to manage automatic dependency installation and
# linking.

# Each of the following should be on a line beginning with the characters #$
# (preceding whitespace is fine). Sample args are given.

#   ROGUEC       = roguec       # Path to roguec to compile this file with
#   ROGUEC_ARGS  = --whatever   # Additional options to pass to RogueC
#   CC           = gcc -Wall -fno-strict-aliasing
#   CC_ARGS      = -a -b -c          # Additional C args
#   LINK         = -lalpha -lbeta    # Link this build file with these options
#   LINK(macOS)  = ...               # Options applying only to
#                                    # System.os=="macOS" (use with any OS and
#                                    # any comment directive)
#   LINK_LIBS    = true              # Links following LIBRARIES with this Build
#                                    # file (otherwise just installs them)
#   LINK_LIBS    = false             # Linking turned off for following
#                                    # LIBRARIES - info can still be obtained
#                                    # from $LIBRARY_FLAGS or $LIBRARIES(libname,...)
#   LIBRARIES    = libalpha
#   LIBRARIES    = libbeta(library-name)
#   LIBRARIES    = libfreetype6-dev(freetype2)
#   DEPENDENCIES = Library/Rogue/**/*.rogue
#
#   LIBRARIES    = name(package)
#   LIBRARIES    = name(
#                    exe:<which-name>
#                    exists-cmd:<exists-cmd>
#                    flags:<library-flags>
#                    ignore-exe-only:<setting>
#                    info:<info-name>
#                    info-cmd:<get-info-cmd>
#                    install:<install-name>
#                    install-cmd:<install-cmd>
#                    link:<setting>
#                    package:<package-name>
#                  )
#
# The following macro is replaced within this file (Build.rogue) - the libraries
# should normally also be declared in #$ LIBRARIES:
#
#   $LIBRARY_FLAGS(lib1,lib2)                              # sample macro
#     ->
#   -Ipath/to/lib1/include -Lpath/to/lib1/library -I ...   # sample replacement

routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description_text=null:String, syntax_text=null:String )
  if (description_text) description( command, description_text )
  if (syntax_text)      syntax( command, syntax_text )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = [String:String]
    rogo_descriptions   = [String:String]
    rogo_prefix         = "rogo_"
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_SETTINGS_FILE = "Local.rogo"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      if (not m) throw Error( "No such routine rogo_$()" (rogo_command) )

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( null )
          others:       args.add( arg )
        endWhich
      endForEach
      m( args )

    method find_command( name:String )->MethodInfo
      return <<Routine>>.find_global_method( rogo_prefix + name )

    method on_error
      local w = Console.width.or_smaller( 80 )
      Console.error.println "=" * w
      Console.error.println rogo_error->String.word_wrapped(w)
      Console.error.println "=" * w
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * w
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = parts.join("_")
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_SETTINGS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.rogo
      local overrides = String[]
      if (File(defs_filepath).exists)
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local rhs   = line.after_first('=').trimmed
            local value : Value
            if (rhs.begins_with('"') or rhs.begins_with('\''))
              value = rhs.leftmost(-1).rightmost(-1)
            elseIf (rhs.begins_with('{') or rhs.begins_with('['))
              value = JSON.parse( rhs )
            else
              value = rhs
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              p.set_value( this, value )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  # SYNTAX: rogo help [command]
  # Displays help for a specified command or else all build commands.
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      description .= replacing("<br>","\n")
      local max_w = Console.width - 2
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(max_w)))
        print( "  " )
        println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      local w = Console.width.or_smaller( 80 )
      println "=" * w
      println "ERROR: No such command '$'." (command)
      println "=" * w
      println
    endIf
  endIf

  println "USAGE"
  local entries = CommandInfo[]
  local max_len = 0
  forEach (m in <<Routine>>.global_methods)
    if (m.name.begins_with(Build.rogo_prefix))
      local name = m.name.after_first( Build.rogo_prefix )
      local entry = CommandInfo( name, get_syntax(name), get_description(name) )
      max_len .= or_larger( entry.syntax.count )
      entries.add entry
    endIf
  endForEach

  entries.sort( $1.name < $2.name )
  max_len += 2

  local max_w = Console.width
  forEach (entry in entries)
    print "  " + entry.syntax
    if (entry.@description)
      local description = entry.@description.before_first( '\n' )
      loop (max_len - entry.syntax.count) print ' '
      contingent
        sufficient (2 + max_len + description.count <= max_w)
        if (description.contains(". "))
          description = description.before_first( ". " ) + "."
          sufficient (max_len + description.count <= max_w)
        endIf
        necessary (max_len + 10 <= max_w)
        description = description.unright( (description.count - (max_w - max_len))+5 ) + "..."
      satisfied
        print description
      endContingent
    endIf
    println
  endForEach
  println
endRoutine

routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Routine>>.find_global_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" ((forEach in m.parameters).name)
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine

class CommandInfo( name:String, syntax:String, description:String );
